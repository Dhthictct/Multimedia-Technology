
// ReaderDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "Reader.h"
#include "ReaderDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CReaderDlg 对话框



CReaderDlg::CReaderDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_READER_DIALOG, pParent)
	, strFilePath(_T(""))
	, Content(_T(""))
	, pSpVoice(NULL)
	, con(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CReaderDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_EDIT_CONTENT, m_con);
	DDX_Text(pDX, IDC_EDIT_CONTENT, con);
}

BEGIN_MESSAGE_MAP(CReaderDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON_FILE, &CReaderDlg::OnBnClickedButtonFile)
	ON_BN_CLICKED(IDC_BUTTON_SLOW, &CReaderDlg::OnBnClickedButtonSlow)
	ON_BN_CLICKED(IDC_BUTTON_FAST, &CReaderDlg::OnBnClickedButtonFast)
	ON_BN_CLICKED(IDC_BUTTON_DOWN, &CReaderDlg::OnBnClickedButtonDown)
	ON_BN_CLICKED(IDC_BUTTON_UP, &CReaderDlg::OnBnClickedButtonUp)
	ON_BN_CLICKED(IDOK, &CReaderDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDCANCEL, &CReaderDlg::OnBnClickedCancel)
END_MESSAGE_MAP()


// CReaderDlg 消息处理程序

BOOL CReaderDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CReaderDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CReaderDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CReaderDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CReaderDlg::OnBnClickedButtonFile()
{
	// TODO: 在此添加控件通知处理程序代码
	// 设置过滤器   
	TCHAR szFilter[] = _T("文本文件(*.txt)|*.txt|所有文件(*.*)|*.*||");
	// 构造打开文件对话框   
	CFileDialog fileDlg(TRUE, _T("txt"), NULL, 0, szFilter, this);

	// 显示打开文件对话框   
	if (IDOK == fileDlg.DoModal())
	{
		strFilePath = fileDlg.GetPathName();
		CFile pFile;
		int hResult = pFile.Open(strFilePath, CFile::modeRead);
		if (hResult != 0) {
			int len = pFile.GetLength();
			char szBuff[1000000] = "";
			//pFile.Read(temp.GetBuffer(pFile.GetLength()), pFile.GetLength());
			pFile.Read(szBuff, pFile.GetLength());
			pFile.Close();
			Content = szBuff;
			GetDlgItem(IDC_EDIT_CONTENT)->SetWindowText(Content);
			::CoInitialize(NULL);//初始化语音环境
			if (FAILED(CoCreateInstance(CLSID_SpVoice, NULL, CLSCTX_INPROC_SERVER, IID_ISpVoice, (void **)&pSpVoice)))
				//给语音变量创建环境，相当于创建语音变量，FAILED是个宏定义，就是来判断CoCreateInstance这个函数又没有成功创建语音变量，下面是不成功的提示信息。
			{
				MessageBox("Failed to create instance of ISpVoice!");
			}
		}
	}
}


void CReaderDlg::OnBnClickedButtonSlow()
{
	// TODO: 在此添加控件通知处理程序代码
	long val;
	pSpVoice->GetRate(&val);
	if (val < -9) {
		val = -10;
	}
	else {
		val--;
	}
	pSpVoice->SetRate(val);
	Result(val, 0, 0);
}


void CReaderDlg::OnBnClickedButtonFast()
{
	// TODO: 在此添加控件通知处理程序代码
	long val;
	pSpVoice->GetRate(&val);
	if (val > 9) {
		val = 10;
	}
	else {
		val++;
	}
	pSpVoice->SetRate(val);
	Result(val, 0, 0);
}


void CReaderDlg::OnBnClickedButtonDown()
{
	// TODO: 在此添加控件通知处理程序代码
	USHORT val;
	pSpVoice->GetVolume(&val);
	if (val < 10) {
		val = 0;
	}
	else {
		val -= 10;
	}
	pSpVoice->SetVolume(val);
	Result(0, val, 1);
}


void CReaderDlg::OnBnClickedButtonUp()
{
	// TODO: 在此添加控件通知处理程序代码
	USHORT val;
	pSpVoice->GetVolume(&val);
	if (val > 90) {
		val = 100;
	}
	else {
		val += 10;
	}
	pSpVoice->SetVolume(val);
	Result(0, val, 1);
}


void CReaderDlg::OnBnClickedOk()
{
	// TODO: 在此添加控件通知处理程序代码
	//CDialogEx::OnOK();
	USES_CONVERSION;
	pSpVoice->Speak(A2CW((LPCSTR)Content), SPF_DEFAULT, NULL);//执行语音变量的Speek函数，这个函数用来读文字。
	
}


void CReaderDlg::OnBnClickedCancel()
{
	// TODO: 在此添加控件通知处理程序代码
	pSpVoice->Release(); //释放语音变量
	::CoUninitialize();//释放语音环境
	CDialogEx::OnCancel();
}


// 设置后的效果
void CReaderDlg::Result(long val1, USHORT val2, int flag)
{
	pSpVoice->Speak(L"Hello World!", SPF_DEFAULT, NULL);
}
